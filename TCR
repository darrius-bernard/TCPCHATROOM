import socket
import ssl
import threading

# Server configuration
SERVER_HOST = '127.0.0.1'
SERVER_PORT = 12345
CERTIFICATE = 'server.crt'
KEY = 'server.key'

# Client handling function
def handle_client(client_socket):
    while True:
        try:
            message = client_socket.recv(1024).decode('utf-8')
            if not message:
                break
            print(f"Received: {message}")
            broadcast(message, client_socket)
        except:
            break
    client_socket.close()

# Broadcast message to all clients
def broadcast(message, client_socket):
    for client in clients:
        if client != client_socket:
            try:
                client.send(message.encode('utf-8'))
            except:
                client.close()
                clients.remove(client)

# Main server function
def start_server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((SERVER_HOST, SERVER_PORT))
    server_socket.listen(5)
    print(f"Server listening on {SERVER_HOST}:{SERVER_PORT}")

    context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
    context.load_cert_chain(certfile=CERTIFICATE, keyfile=KEY)

    while True:
        client_socket, addr = server_socket.accept()
        secure_socket = context.wrap_socket(client_socket, server_side=True)
        print(f"Connection from {addr}")
        clients.append(secure_socket)
        threading.Thread(target=handle_client, args=(secure_socket,)).start()

if __name__ == "__main__":
    clients = []
    start_server()
import socket
import ssl
import threading

# Client configuration
SERVER_HOST = '127.0.0.1'
SERVER_PORT = 12345
CERTIFICATE = 'server.crt'

# Function to receive messages from the server
def receive_messages(sock):
    while True:
        try:
            message = sock.recv(1024).decode('utf-8')
            if not message:
                break
            print(f"Server: {message}")
        except:
            break

# Main client function
def start_client():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
    context.load_verify_locations(CERTIFICATE)

    secure_socket = context.wrap_socket(client_socket, server_hostname=SERVER_HOST)
    secure_socket.connect((SERVER_HOST, SERVER_PORT))

    threading.Thread(target=receive_messages, args=(secure_socket,)).start()

    while True:
        message = input()
        if message.lower() == 'exit':
            break
        secure_socket.send(message.encode('utf-8'))

    secure_socket.close()

if __name__ == "__main__":
    start_client()
openssl req -newkey rsa:2048 -nodes -keyout server.key -x509 -days 365 -out server.crt
python server.py
